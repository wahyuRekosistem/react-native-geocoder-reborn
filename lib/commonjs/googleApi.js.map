{"version":3,"sources":["googleApi.ts"],"names":["GOOGLE_URL","geocodeRequest","url","headers","fetch","res","json","results","status","Error","error_message","map","format","raw","geocodeObj","position","formattedAddress","formatted_address","feature","streetNumber","streetName","postalCode","locality","country","countryCode","adminArea","subAdminArea","subLocality","geometry","location","lat","lng","address_components","forEach","component","types","indexOf","long_name","short_name","geocodePosition","apiKey","language","geocodeAddress","address","encodeURI","geocodeAddressWithBounds","bounds","sw","ne"],"mappings":"+PAEA,GAAMA,CAAAA,UAAU,CAAG,+CAAnB,CAEA,QAAeC,CAAAA,cAAf,CAA8BC,GAA9B,CAA2CC,OAA3C,0LACkBC,KAAK,CAACF,GAAD,CAAM,CAAEC,OAAO,CAAPA,OAAF,CAAN,CADvB,SACME,GADN,iEAEmBA,GAAG,CAACC,IAAJ,EAFnB,SAEMA,IAFN,oBAIM,CAACA,IAAI,CAACC,OAAN,EAAiBD,IAAI,CAACE,MAAL,GAAgB,IAJvC,+BAKU,IAAIC,CAAAA,KAAJ,wBACmBH,IAAI,CAACE,MADxB,MACmCF,IAAI,CAACI,aADxC,CALV,wCASSJ,IAAI,CAACC,OAAL,CAAaI,GAAb,CAAiBC,MAAjB,CATT,uEAYA,QAASA,CAAAA,MAAT,CAAgBC,GAAhB,CAA0B,CACxB,GAAMC,CAAAA,UAAU,CAAG,CACjBC,QAAQ,CAAE,EADO,CAEjBC,gBAAgB,CAAEH,GAAG,CAACI,iBAAJ,EAAyB,EAF1B,CAGjBC,OAAO,CAAE,IAHQ,CAIjBC,YAAY,CAAE,IAJG,CAKjBC,UAAU,CAAE,IALK,CAMjBC,UAAU,CAAE,IANK,CAOjBC,QAAQ,CAAE,IAPO,CAQjBC,OAAO,CAAE,IARQ,CASjBC,WAAW,CAAE,IATI,CAUjBC,SAAS,CAAE,IAVM,CAWjBC,YAAY,CAAE,IAXG,CAYjBC,WAAW,CAAE,IAZI,CAAnB,CAeA,GAAId,GAAG,CAACe,QAAJ,EAAgBf,GAAG,CAACe,QAAJ,CAAaC,QAAjC,CAA2C,CACzCf,UAAU,CAACC,QAAX,CAAsB,CACpBe,GAAG,CAAEjB,GAAG,CAACe,QAAJ,CAAaC,QAAb,CAAsBC,GADP,CAEpBC,GAAG,CAAElB,GAAG,CAACe,QAAJ,CAAaC,QAAb,CAAsBE,GAFP,CAAtB,CAID,CAEDlB,GAAG,CAACmB,kBAAJ,CAAuBC,OAAvB,CAA+B,SAACC,SAAD,CAAoB,CACjD,GAAIA,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,OAAxB,IAAqC,CAAC,CAA1C,CAA6C,CAC3CtB,UAAU,CAACM,UAAX,CAAwBc,SAAS,CAACG,SAAlC,CACD,CAFD,IAEO,IAAIH,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,eAAxB,IAA6C,CAAC,CAAlD,CAAqD,CAC1DtB,UAAU,CAACK,YAAX,CAA0Be,SAAS,CAACG,SAApC,CACD,CAFM,IAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,SAAxB,IAAuC,CAAC,CAA5C,CAA+C,CACpDtB,UAAU,CAACS,OAAX,CAAqBW,SAAS,CAACG,SAA/B,CACAvB,UAAU,CAACU,WAAX,CAAyBU,SAAS,CAACI,UAAnC,CACD,CAHM,IAGA,IAAIJ,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,UAAxB,IAAwC,CAAC,CAA7C,CAAgD,CACrDtB,UAAU,CAACQ,QAAX,CAAsBY,SAAS,CAACG,SAAhC,CACD,CAFM,IAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,aAAxB,IAA2C,CAAC,CAAhD,CAAmD,CACxDtB,UAAU,CAACO,UAAX,CAAwBa,SAAS,CAACG,SAAlC,CACD,CAFM,IAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,6BAAxB,IAA2D,CAAC,CAAhE,CAAmE,CACxEtB,UAAU,CAACW,SAAX,CAAuBS,SAAS,CAACG,SAAjC,CACD,CAFM,IAEA,IAAIH,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,6BAAxB,IAA2D,CAAC,CAAhE,CAAmE,CACxEtB,UAAU,CAACY,YAAX,CAA0BQ,SAAS,CAACG,SAApC,CACD,CAFM,IAEA,IACLH,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,aAAxB,IAA2C,CAAC,CAA5C,EACAF,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,qBAAxB,IAAmD,CAAC,CAF/C,CAGL,CACAtB,UAAU,CAACa,WAAX,CAAyBO,SAAS,CAACG,SAAnC,CACD,CALM,IAKA,IACLH,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,mBAAxB,IAAiD,CAAC,CAAlD,EACAF,SAAS,CAACC,KAAV,CAAgBC,OAAhB,CAAwB,iBAAxB,IAA+C,CAAC,CAF3C,CAGL,CACAtB,UAAU,CAACI,OAAX,CAAqBgB,SAAS,CAACG,SAA/B,CACD,CACF,CA3BD,EA6BA,MAAOvB,CAAAA,UAAP,CACD,C,aAEc,CACbyB,eADa,0BAEXC,MAFW,CAGXzB,QAHW,CAIX0B,QAJW,CAKXtC,OALW,CAMX,CACA,MAAOF,CAAAA,cAAc,CAChBD,UADgB,SACEwC,MADF,YACmBzB,QAAQ,CAACe,GAD5B,KACmCf,QAAQ,CAACgB,GAD5C,cAC4DU,QAD5D,CAEnBtC,OAFmB,CAArB,CAID,CAXY,CAabuC,cAba,yBAcXF,MAdW,CAeXG,OAfW,CAgBXF,QAhBW,CAiBXtC,OAjBW,CAkBX,CACA,MAAOF,CAAAA,cAAc,CAChBD,UADgB,SACEwC,MADF,aACoBI,SAAS,CAC9CD,OAD8C,CAD7B,cAGLF,QAHK,CAInBtC,OAJmB,CAArB,CAMD,CAzBY,CA2Bb0C,wBA3Ba,mCA4BXL,MA5BW,CA6BXG,OA7BW,CA8BXG,MA9BW,CA+BXL,QA/BW,CAgCXtC,OAhCW,CAiCX,CACA,GAAM4C,CAAAA,EAAN,CAAiBD,MAAjB,CAAMC,EAAN,CAAUC,EAAV,CAAiBF,MAAjB,CAAUE,EAAV,CACA,MAAO/C,CAAAA,cAAc,CAChBD,UAAH,SAAqBwC,MAArB,aAAuCI,SAAS,CAACD,OAAD,CAAhD,aACaI,EAAE,CAACjB,GADhB,KACuBiB,EAAE,CAAChB,GAD1B,KACiCiB,EAAE,CAAClB,GADpC,KAC2CkB,EAAE,CAACjB,GAD9C,cAC8DU,QAD9D,CADmB,CAGnBtC,OAHmB,CAArB,CAKD,CAxCY,C","sourcesContent":["import { Position, Bounds, GeocodingObject, RequestHeaders } from './types';\n\nconst GOOGLE_URL = 'https://maps.google.com/maps/api/geocode/json';\n\nasync function geocodeRequest(url: string, headers?: RequestHeaders) {\n  let res = await fetch(url, { headers });\n  let json = await res.json();\n\n  if (!json.results || json.status !== 'OK') {\n    throw new Error(\n      `Google Maps Error: [${json.status}] ${json.error_message}`\n    );\n  }\n  return json.results.map(format) as GeocodingObject[];\n}\n\nfunction format(raw: any) {\n  const geocodeObj = {\n    position: {},\n    formattedAddress: raw.formatted_address || '',\n    feature: null,\n    streetNumber: null,\n    streetName: null,\n    postalCode: null,\n    locality: null,\n    country: null,\n    countryCode: null,\n    adminArea: null,\n    subAdminArea: null,\n    subLocality: null,\n  };\n\n  if (raw.geometry && raw.geometry.location) {\n    geocodeObj.position = {\n      lat: raw.geometry.location.lat,\n      lng: raw.geometry.location.lng,\n    };\n  }\n\n  raw.address_components.forEach((component: any) => {\n    if (component.types.indexOf('route') !== -1) {\n      geocodeObj.streetName = component.long_name;\n    } else if (component.types.indexOf('street_number') !== -1) {\n      geocodeObj.streetNumber = component.long_name;\n    } else if (component.types.indexOf('country') !== -1) {\n      geocodeObj.country = component.long_name;\n      geocodeObj.countryCode = component.short_name;\n    } else if (component.types.indexOf('locality') !== -1) {\n      geocodeObj.locality = component.long_name;\n    } else if (component.types.indexOf('postal_code') !== -1) {\n      geocodeObj.postalCode = component.long_name;\n    } else if (component.types.indexOf('administrative_area_level_1') !== -1) {\n      geocodeObj.adminArea = component.long_name;\n    } else if (component.types.indexOf('administrative_area_level_2') !== -1) {\n      geocodeObj.subAdminArea = component.long_name;\n    } else if (\n      component.types.indexOf('sublocality') !== -1 ||\n      component.types.indexOf('sublocality_level_1') !== -1\n    ) {\n      geocodeObj.subLocality = component.long_name;\n    } else if (\n      component.types.indexOf('point_of_interest') !== -1 ||\n      component.types.indexOf('colloquial_area') !== -1\n    ) {\n      geocodeObj.feature = component.long_name;\n    }\n  });\n\n  return geocodeObj;\n}\n\nexport default {\n  geocodePosition(\n    apiKey: string,\n    position: Position,\n    language: string,\n    headers?: RequestHeaders\n  ) {\n    return geocodeRequest(\n      `${GOOGLE_URL}?key=${apiKey}&latlng=${position.lat},${position.lng}&language=${language}`,\n      headers\n    );\n  },\n\n  geocodeAddress(\n    apiKey: string,\n    address: string,\n    language: string,\n    headers?: RequestHeaders\n  ) {\n    return geocodeRequest(\n      `${GOOGLE_URL}?key=${apiKey}&address=${encodeURI(\n        address\n      )}&language=${language}`,\n      headers\n    );\n  },\n\n  geocodeAddressWithBounds(\n    apiKey: string,\n    address: string,\n    bounds: Bounds,\n    language: string,\n    headers?: RequestHeaders\n  ) {\n    let { sw, ne } = bounds;\n    return geocodeRequest(\n      `${GOOGLE_URL}?key=${apiKey}&address=${encodeURI(address)}` +\n        `&bounds=${sw.lat},${sw.lng}|${ne.lat},${ne.lng}&language=${language}`,\n      headers\n    );\n  },\n};\n"]}