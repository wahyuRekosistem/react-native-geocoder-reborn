{"version":3,"sources":["geocoder.ts"],"names":["defaultOptions","locale","fallbackToGoogle","forceGoogleOnIos","maxResults","getApiKey","apiKey","Error","geocodePositionGoogle","position","options","headers","requestHeaders","googleApi","geocodePosition","geocodeAddressGoogle","address","bounds","geocodeAddressWithBounds","geocodeAddress","lat","lng","Platform","OS","nativeImpl","geocodePositionAndroid","message","regionIos","center","radius","geocodeAddressInRegion","geocodeAddressAndroid"],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\nimport nativeImpl from './native';\nimport googleApi from './googleApi';\nimport { Position, GeocoderOptions, GeocodingObject } from './types';\n\nlet defaultOptions = {\n  locale: 'en',\n  fallbackToGoogle: false,\n  forceGoogleOnIos: false,\n  maxResults: 2,\n};\n\nfunction getApiKey(apiKey?: string) {\n  if (!apiKey) {\n    throw new Error(\n      'Invalid API Key: `apiKey` is required for using Google Maps API.'\n    );\n  }\n  return apiKey;\n}\n\nasync function geocodePositionGoogle(\n  position: Position,\n  options: GeocoderOptions = {}\n) {\n  let apiKey = getApiKey(options.apiKey);\n  let locale = options.locale || defaultOptions.locale;\n  let headers = options.requestHeaders;\n  return googleApi.geocodePosition(apiKey, position, locale, headers);\n}\n\nasync function geocodeAddressGoogle(\n  address: string,\n  options: GeocoderOptions = {}\n) {\n  let apiKey = getApiKey(options.apiKey);\n  let locale = options.locale || defaultOptions.locale;\n  let headers = options.requestHeaders;\n  if (options.bounds) {\n    // Use rectangle bounds for Google Maps api\n    return googleApi.geocodeAddressWithBounds(\n      apiKey,\n      address,\n      options.bounds,\n      locale,\n      headers\n    );\n  }\n  return googleApi.geocodeAddress(apiKey, address, locale, headers);\n}\n\nasync function geocodePosition(\n  position: Position,\n  options: GeocoderOptions = {}\n): Promise<GeocodingObject[]> {\n  if (!position || position.lat == null || position.lng == null) {\n    throw new Error('Invalid Position: `{lat, lng}` is required');\n  }\n\n  if (options.forceGoogleOnIos && Platform.OS === 'ios') {\n    return geocodePositionGoogle(position, options);\n  }\n\n  if (nativeImpl == null) {\n    if (options.fallbackToGoogle) {\n      return geocodePositionGoogle(position, options);\n    }\n    throw new Error(\n      'Missing Native Module: Please check the module linking, ' +\n        'or set `fallbackToGoogle` in the init options.'\n    );\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await nativeImpl.geocodePositionAndroid(position, options);\n    } else {\n      return await nativeImpl.geocodePosition(\n        position,\n        options.locale || defaultOptions.locale,\n        options.maxResults || defaultOptions.maxResults\n      );\n    }\n  } catch (err) {\n    if (options.fallbackToGoogle) {\n      return geocodePositionGoogle(position, options);\n    }\n    throw new Error('Native Error: ' + err?.message || 'Unknown Execption.');\n  }\n}\n\nasync function geocodeAddress(\n  address: string,\n  options: GeocoderOptions = {}\n): Promise<GeocodingObject[]> {\n  if (!address) {\n    throw new Error('Invalid Address: `string` is required');\n  }\n\n  if (options.forceGoogleOnIos && Platform.OS === 'ios') {\n    return geocodeAddressGoogle(address, options);\n  }\n\n  if (nativeImpl == null) {\n    if (options.fallbackToGoogle) {\n      return geocodeAddressGoogle(address, options);\n    }\n    throw new Error(\n      'Missing Native Module: Please check the module linking, ' +\n        'or set `fallbackToGoogle` in the init options.'\n    );\n  }\n\n  try {\n    if (Platform.OS === 'ios' && options.regionIos) {\n      // Use round region query for iOS\n      let { center, radius } = options.regionIos;\n      return await nativeImpl.geocodeAddressInRegion(\n        address,\n        center.lat,\n        center.lng,\n        radius,\n        options.locale || defaultOptions.locale,\n        options.maxResults || defaultOptions.maxResults\n      );\n    } else if (Platform.OS === 'android') {\n      return await nativeImpl.geocodeAddressAndroid(address, options);\n    } else {\n      return await nativeImpl.geocodeAddress(\n        address,\n        options.locale || defaultOptions.locale,\n        options.maxResults || defaultOptions.maxResults\n      );\n    }\n  } catch (err) {\n    if (options.fallbackToGoogle) {\n      return geocodeAddressGoogle(address, options);\n    }\n    throw new Error('Native Error: ' + err?.message || 'Unknown Execption.');\n  }\n}\n\nexport default {\n  geocodePosition,\n  geocodePositionGoogle,\n  geocodeAddress,\n  geocodeAddressGoogle,\n};\n"]}